package com.luusean.studentscannerlab.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_STUDENT_OBJECT".
*/
public class EventStudentObjectDao extends AbstractDao<EventStudentObject, Long> {

    public static final String TABLENAME = "EVENT_STUDENT_OBJECT";

    /**
     * Properties of entity EventStudentObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdLocal = new Property(0, Long.class, "idLocal", true, "_id");
        public final static Property Event_id = new Property(1, Long.class, "event_id", false, "EVENT_ID");
        public final static Property Stu_id = new Property(2, String.class, "stu_id", false, "STU_ID");
    }


    public EventStudentObjectDao(DaoConfig config) {
        super(config);
    }
    
    public EventStudentObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_STUDENT_OBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idLocal
                "\"EVENT_ID\" INTEGER," + // 1: event_id
                "\"STU_ID\" TEXT);"); // 2: stu_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_STUDENT_OBJECT_EVENT_ID ON \"EVENT_STUDENT_OBJECT\"" +
                " (\"EVENT_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_STUDENT_OBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventStudentObject entity) {
        stmt.clearBindings();
 
        Long idLocal = entity.getIdLocal();
        if (idLocal != null) {
            stmt.bindLong(1, idLocal);
        }
 
        Long event_id = entity.getEvent_id();
        if (event_id != null) {
            stmt.bindLong(2, event_id);
        }
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(3, stu_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventStudentObject entity) {
        stmt.clearBindings();
 
        Long idLocal = entity.getIdLocal();
        if (idLocal != null) {
            stmt.bindLong(1, idLocal);
        }
 
        Long event_id = entity.getEvent_id();
        if (event_id != null) {
            stmt.bindLong(2, event_id);
        }
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(3, stu_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventStudentObject readEntity(Cursor cursor, int offset) {
        EventStudentObject entity = new EventStudentObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idLocal
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // event_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // stu_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventStudentObject entity, int offset) {
        entity.setIdLocal(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEvent_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStu_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventStudentObject entity, long rowId) {
        entity.setIdLocal(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventStudentObject entity) {
        if(entity != null) {
            return entity.getIdLocal();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventStudentObject entity) {
        return entity.getIdLocal() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
