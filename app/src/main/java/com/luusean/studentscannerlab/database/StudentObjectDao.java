package com.luusean.studentscannerlab.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_OBJECT".
*/
public class StudentObjectDao extends AbstractDao<StudentObject, Long> {

    public static final String TABLENAME = "STUDENT_OBJECT";

    /**
     * Properties of entity StudentObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdLocal = new Property(0, Long.class, "idLocal", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Fname = new Property(2, String.class, "fname", false, "FNAME");
        public final static Property Lname = new Property(3, String.class, "lname", false, "LNAME");
        public final static Property Classroom = new Property(4, String.class, "classroom", false, "CLASSROOM");
    }


    public StudentObjectDao(DaoConfig config) {
        super(config);
    }
    
    public StudentObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_OBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idLocal
                "\"ID\" TEXT," + // 1: id
                "\"FNAME\" TEXT," + // 2: fname
                "\"LNAME\" TEXT," + // 3: lname
                "\"CLASSROOM\" TEXT);"); // 4: classroom
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STUDENT_OBJECT_ID ON \"STUDENT_OBJECT\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_OBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentObject entity) {
        stmt.clearBindings();
 
        Long idLocal = entity.getIdLocal();
        if (idLocal != null) {
            stmt.bindLong(1, idLocal);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(3, fname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(4, lname);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(5, classroom);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentObject entity) {
        stmt.clearBindings();
 
        Long idLocal = entity.getIdLocal();
        if (idLocal != null) {
            stmt.bindLong(1, idLocal);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(3, fname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(4, lname);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(5, classroom);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudentObject readEntity(Cursor cursor, int offset) {
        StudentObject entity = new StudentObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idLocal
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // classroom
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentObject entity, int offset) {
        entity.setIdLocal(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassroom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudentObject entity, long rowId) {
        entity.setIdLocal(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudentObject entity) {
        if(entity != null) {
            return entity.getIdLocal();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentObject entity) {
        return entity.getIdLocal() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
